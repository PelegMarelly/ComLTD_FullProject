services:
  # MySQL service
  mysql:
    image: mysql:8.0  # Use MySQL version 8.0
    container_name: mysql-container  # Name for the MySQL container
    ports:
      - "3306:3306"  # Expose the MySQL port
    environment:
      MYSQL_ROOT_PASSWORD: root  # Set root password for MySQL
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount the init.sql file for creating databases and users
    networks:
      - comltd-network  # Network for communication between services

  # Protected backend service
  backend_protected:
    build:
      context: ./Backend_protected  # Path to the backend_protected Dockerfile
    ports:
      - "10000:10000"  # Expose the protected backend API port
    env_file:
      - ./Backend_protected/.env  # Load environment variables from .env file
    depends_on:
      - mysql  # Ensure MySQL is ready before starting the backend
    networks:
      - comltd-network  # Network for communication between services

  # Vulnerable backend service
  backend_vulnerable:
    build:
      context: ./Backend_vulnerable  # Path to the backend_vulnerable Dockerfile
    ports:
      - "11000:11000"  # Expose the vulnerable backend API port
    env_file:
      - ./Backend_vulnerable/.env  # Load environment variables from .env file
    depends_on:
      - mysql  # Ensure MySQL is ready before starting the vulnerable backend
    networks:
      - comltd-network  # Network for communication between services

  # Frontend service
  frontend:
    build:
      context: ./Frontend  # Path to the frontend Dockerfile
    ports:
      - "3000:3000"  # Expose the frontend port
    networks:
      - comltd-network  # Network for communication between services

networks:
  comltd-network:
    driver: bridge  # Use bridge network for communication between services

volumes:
  mysql_data:
    driver: local  # Persistent storage for MySQL data
